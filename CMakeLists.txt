cmake_minimum_required(VERSION 3.22.1)
set(EX_VERSION_MAJOR 0)
set(EX_VERSION_MINOR 0)
set(EX_VERSION_PATCH 1)
set(EX_VERSION_TWEAK 0)
project(eigix VERSION ${EX_VERSION_MAJOR}.${EX_VERSION_MINOR}.${EX_VERSION_PATCH}.${EX_VERSION_TWEAK})

set(CMAKE_CXX_STANDARD 20)

if("${CMAKE_SYSTEM_NAME}" STREQUAL "Linux")
    set(LINUX ON)
    if(ZG_INSTALL)
        file(READ "/etc/os-release" OS_RELEASE)
        string(REGEX MATCH "Debian|Ubuntu|Fedora" DIST ${OS_RELEASE})
        if(DIST STREQUAL "Debian" OR
            DIST STREQUAL "Ubuntu")
            set(DEB true)
        elseif(DIST STREQUAL "Fedora")
            set(RPM true)
        else()
            message(FATAL_ERROR ">>>> Found unknown distribution <<<<")
        endif()
    endif()
elseif("${CMAKE_SYSTEM_NAME}" STREQUAL "Darwin")
    set(MACOS ON)
elseif(WIN32)
    set(WINDOWS ON)
endif()

# call this function once per project
function(crossplatform_cpack_helper
    OUTPUT_DIRECTORY                    # i.e. ${CMAKE_SOURCE_DIR}/releases
    DISPLAY_NAME                        # installer display name
    TARGET_NAME                         # package target name
    VERSION_MAJOR                       # M
    VERSION_MINOR                       # m
    VERSION_PATCH                       # p
    VERSION_TWEAK                       # t
    LICENSE                             # i.e. ${CMAKE_SOURCE_DIR}/LICENSE
    SUMMARY                             # a short summary of the package
    DESCRIPTION                         # a longer description of the package
    HOMEPAGE_URL                        # url to projects homepage
    PACKAGE_ICON                        # icon used for package and installer
    VENDOR                              # The vendor of the package
    CONTACT                             # contact info for the vendor
    MAINTAINER                          # the maintainer of the package
    DEB_DEPENDS                         # debian dependencies (comma separated)
    RPM_DEPENDS                         # fedora dependencies (comma separated)
    RPM_GROUP                           # fedora group (Development/Debug, Development/Languages, Development/Libraries, Development/System, Development/Tools, System Environment/Base, System Environment/Daemons, System Environment/Kernel, System Environment/Libraries, System Environment/Shells, Networking/Daemons, Networking/Utilities, Networking/Clients, Networking/Servers, User Interface/Desktops, User Interface/X, User Interface/Printing, Applications/Multimedia, Applications/Graphics, Games/Action, Games/Strategy, Games/Tools, Security/Authentication, Security/Encryption, Scientific/Mathematics, Scientific/Engineering)
    # WINDOWS_START_MENU_LINKS            # windows start menu links (pairs: binarypath/entryname)
    WINDOWS_PREFERRED_INSTALL_DIRECTORY # i.e. Program Files\\\\ProjectName
    WINDOWS_PREFERRED_INSTALL_ROOT      # i.e. C:
    WINDOWS_UNINSTALL_NAME              # i.e. ${TARGET_NAME}-uninstaller
    MACOS_BUNDLE_ID                     # i.e. com.projectorg.projectname
    COMPONENTS_ALL                      # i.e. headers tests
)
    # message(STATUS "WINDOWS_START_MENU_LINKS: ${WINDOWS_START_MENU_LINKS}")
    # message(STATUS "WINDOWS_PREFERRED_INSTALL_DIRECTORY: ${WINDOWS_PREFERRED_INSTALL_DIRECTORY}")
    set(CPACK_OUTPUT_FILE_PREFIX "${OUTPUT_DIRECTORY}")
    if(DEB)
        set(OS_LOWER "debian")
    elseif(RPM)
        set(OS_LOWER "fedora")
    elseif(WIN32)
        set(OS_LOWER "windows")
    elseif(MACOS)
        set(OS_LOWER "macos")
    endif()
    set(CPACK_PACKAGE_VERSION_MAJOR ${VERSION_MAJOR})
    set(CPACK_PACKAGE_VERSION_MINOR ${VERSION_MINOR})
    set(CPACK_PACKAGE_VERSION_PATCH ${VERSION_PATCH})
    set(CPACK_PACKAGE_VERSION_TWEAK ${VERSION_TWEAK})
    set(CPACK_PACKAGE_VERSION "${CPACK_PACKAGE_VERSION_MAJOR}.${CPACK_PACKAGE_VERSION_MINOR}.${CPACK_PACKAGE_VERSION_PATCH}.${CPACK_PACKAGE_VERSION_TWEAK}")
    set(CPACK_PACKAGE_NAME "${TARGET_NAME}-v${CPACK_PACKAGE_VERSION}-${OS_LOWER}-${CMAKE_SYSTEM_PROCESSOR}")
    set(CPACK_PACKAGE_FILE_NAME "${CPACK_PACKAGE_NAME}")
    set(CPACK_PACKAGE_DESCRIPTION_SUMMARY "${SUMMARY}")
    set(CPACK_PACKAGE_DESCRIPTION "${DESCRIPTION}")
    set(CPACK_PACKAGE_HOMEPAGE_URL "${HOMEPAGE_URL}")
    set(CPACK_PACKAGE_ICON "${PACKAGE_ICON}")
    set(CPACK_PACKAGE_VENDOR "${VENDOR}")
    set(CPACK_PACKAGE_CONTACT "${CONTACT}")
    if(DEB)
        set(CPACK_GENERATOR "DEB")
        set(CPACK_DEBIAN_PACKAGE_MAINTAINER "${MAINTAINER}")
        set(CPACK_DEBIAN_PACKAGE_DEPENDS "${DEB_DEPENDS}")
        set(CPACK_DEBIAN_COMPRESSION_TYPE "xz")
    elseif(RPM)
        set(CPACK_GENERATOR "RPM")
        set(CPACK_RPM_PACKAGE_DEPENDS "${RPM_DEPENDS}")
        set(CPACK_RPM_PACKAGE_LICENSE "${LICENSE}")
        set(CPACK_RPM_PACKAGE_GROUP "${RPM_GROUP}")
        set(CPACK_RPM_PACKAGE_URL "${HOMEPAGE_URL}")
        set(CPACK_RPM_PACKAGE_SUMMARY "${SUMMARY}")
    elseif(WINDOWS)
        set(CPACK_GENERATOR "NSIS")
        set(CPACK_NSIS_MODIFY_PATH ON)
        set(CPACK_NSIS_DISPLAY_NAME ${DISPLAY_NAME})
        set(CPACK_NSIS_PACKAGE_NAME ${TARGET_NAME})
        set(CPACK_RESOURCE_FILE_LICENSE "${LICENSE}")
        set(CPACK_NSIS_MUI_ICON "${PACKAGE_ICON}")
        set(CPACK_NSIS_UNINSTALL_NAME "${WINDOWS_UNINSTALL_NAME}")
    elseif(MACOS)
        set(CPACK_GENERATOR "DragNDrop")
        # set(CPACK_PRODUCTBUILD_IDENTIFIER "${MACOS_BUNDLE_ID}")
    endif()
    set(CPACK_PRODUCTBUILD_COMPONENT_INSTALL ON)
    set(CPACK_COMPONENTS_ALL ${COMPONENTS_ALL})
    set(CPACK_COMPONENTS_GROUPING ALL_COMPONENTS_IN_ONE)
    set(CPACK_MONOLITHIC_INSTALL OFF)
    include(CPack)
endfunction()

add_executable(${PROJECT_NAME}_tests tests/test_main.cpp tests/test_2d.cpp tests/test_3d.cpp)
install(DIRECTORY include DESTINATION include
        FILE_PERMISSIONS OWNER_READ GROUP_READ WORLD_READ
        DIRECTORY_PERMISSIONS OWNER_EXECUTE OWNER_READ GROUP_EXECUTE GROUP_READ WORLD_EXECUTE WORLD_READ)
install(TARGETS ${PROJECT_NAME}_tests DESTINATION bin/eigix)

crossplatform_cpack_helper(
    "${CMAKE_SOURCE_DIR}/releases"
    Eigix
    eigix
    ${EX_VERSION_MAJOR}
    ${EX_VERSION_MINOR}
    ${EX_VERSION_PATCH}
    ${EX_VERSION_TWEAK}
    "${CMAKE_SOURCE_DIR}/LICENSE"
    "A 2D Matrix and 3D Tensor header only implementation"
    ""
    ""
    ""
    "Zeucor"
    "Zeun"
    "Zeun"
    ""
    ""
    "Scientific/Mathematics"
    "Program Files\\\\${PROJECT_NAME}"
    "C:"
    "${PROJECT_NAME}-uninstaller"
    "dev.zeucor.eigix"
    "headers tests")